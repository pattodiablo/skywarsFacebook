
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * leaderboard.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function leaderboard(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _leaderboard1 = this.game.add.sprite(0.0, 0.0, 'leaderboard', null, this);
	_leaderboard1.anchor.set(0.5, 0.5);
	
	this.game.add.text(-168.0, 415.0, 'Launch game now', {"font":"bold 40px Arial","fill":"#ffffff","stroke":"#ffffff"}, this);
	
	
	
	// fields
	
	this.fLeaderboard1 = _leaderboard1;
	
	this.myCreate();
	
}

/** @type Phaser.Group */
var leaderboard_proto = Object.create(Phaser.Group.prototype);
leaderboard.prototype = leaderboard_proto;
leaderboard.prototype.constructor = leaderboard;

/* --- end generated code --- */
// -- user code here --
leaderboard.prototype.myCreate = function () {
	this.show =  false;
	this.fLeaderboard1.inputEnabled =  true;
	this.fLeaderboard1.events.onInputDown.add(function(){

		this.game.state.getCurrentState().gameStart();
	}, this);
}

leaderboard.prototype.getPanel = function () {

	this.showPanel = this.game.add.tween(this);
	this.showPanel.to({y:548}, 1000, Phaser.Easing.Linear.None);
	this.showPanel.start();

}

leaderboard.prototype.drawEntries = function (entries,panel) {

		var ypos = 0 
		var yPhotoPos = 0;

		if(entries.length>0){
		entries.forEach(function(entrie) { 

		var playerEntry = entrie.getPlayer();
		this.game.add.text(-276.0, -322.0+ypos, entrie.getScore(), {"font":"bold 40px Arial","fill":"#ffffff","stroke":"#ffffff"}, this);
		
		this.game.load.image('playerImage.'+playerEntry.getName(),  playerEntry.getPhoto());
		this.game.load.onLoadComplete.add(function(){


			var fPlayerPhoto = this.game.add.sprite(0, 0, 'playerImage.'+playerEntry.getName());
		
			this.add(fPlayerPhoto);
			fPlayerPhoto.anchor.setTo(0.5);
			fPlayerPhoto.scale.setTo(0.2);
			fPlayerPhoto.x = -460;
			fPlayerPhoto.y =  -300+yPhotoPos;
			yPhotoPos+=100;
		}, this)
		this.game.load.start();

		  	var contextPLayer = entrie.getPlayer();
		
	
			ypos+=100;

		  	},this);
	}else{

		this.game.add.text(-286.0, 250.0, '*Nobody defeat a boss yet', {"font":"bold 30px Arial","fill":"#ffffff","stroke":"#ffffff"}, this);
		
	}
	
}

leaderboard.prototype.update = function () {
	if(this.show){
		this.getPanel();
		this.show =  false;
	}
}

