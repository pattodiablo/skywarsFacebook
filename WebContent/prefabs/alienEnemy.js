
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * alienEnemy.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function alienEnemy(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _enemyLeg2 = this.game.add.sprite(41.0, 284.0, 'enemyLeg', null, this);
	_enemyLeg2.scale.set(0.5, 0.5);
	
	var _engine = new shipTurbo(this.game, 331.0, 153.0);
	this.add(_engine);
	
	var _enemyShip = this.game.add.sprite(0.0, 0.0, 'enemyShip', null, this);
	_enemyShip.scale.set(0.5, 0.5);
	this.game.physics.arcade.enable(_enemyShip);
	_enemyShip.body.setCircle(225.5, 68.0555419921875, 104.16665649414062);
	_enemyShip.body.immovable = true;
	
	var _enemyLeg = this.game.add.sprite(116.0, 289.0, 'enemyLeg', null, this);
	_enemyLeg.scale.set(0.5, 0.5);
	
	var _alienHeadPrefab = new alienHead(this.game, 76.0, 27.0);
	this.add(_alienHeadPrefab);
	
	var _alienWindow = this.game.add.sprite(0.0, 18.0, 'alienWindow', null, this);
	_alienWindow.scale.set(0.5, 0.5);
	
	var _enemyBar = new enemyLifeBar(this.game, this);
	_enemyBar.position.set(-4.0, -46.0);
	
	
	
	// fields
	
	this.fEnemyLeg2 = _enemyLeg2;
	this.fEngine = _engine;
	this.fEnemyShip = _enemyShip;
	this.fEnemyLeg = _enemyLeg;
	this.fAlienHeadPrefab = _alienHeadPrefab;
	this.fAlienWindow = _alienWindow;
	this.fEnemyBar = _enemyBar;
	
	this.myCreate();
	
}

/** @type Phaser.Group */
var alienEnemy_proto = Object.create(Phaser.Group.prototype);
alienEnemy.prototype = alienEnemy_proto;
alienEnemy.prototype.constructor = alienEnemy;

/* --- end generated code --- */
// -- user code here --
alienEnemy.prototype.myCreate = function() {

	this.destroying =  false;
	this.game.state.getCurrentState().isBossShow = true;
	this.appearTime = this.game.time.create(false);
    this.appearTime.loop(40000, this.leaveScreen, this);
    this.appearTime.start();


	this.fullLifeWidth = this.fEnemyBar.fEnemyLifeFull.width;

	this.damagePower = 1; //usar para probar destruccion del enemigo 1 es default
	this.life = 100;

	this.speedKill =  false;
	this.isKicked =  false;

	this.AlienHeadX = this.fAlienHeadPrefab.x;
	this.AlienHeadY = this.fAlienHeadPrefab.y;

	this.alienWindowX = this.fAlienWindow.x;
	this.alienWindowY = this.fAlienWindow.y;

	this.enemyLegX = this.fEnemyLeg.x;
	this.enemyLegY = this.fEnemyLeg.y;

	this.enemyLeg2X = this.fEnemyLeg2.x;
	this.enemyLeg2Y = this.fEnemyLeg2.y;

	this.fEngineX = this.fEngine.x;
	this.fEngineY = this.fEngine.y;

	this.fEnemyBarX = this.fEnemyBar.x;
	this.fEnemyBarY = this.fEnemyBar.y;

	this.leg1Tween = this.game.add.tween(this.fEnemyLeg).to( {angle:20}, 1000, Phaser.Easing.Sinusoidal.InOut, true);
	this.leg1Tween2 = this.game.add.tween(this.fEnemyLeg).to(  {angle:0}, 1000, Phaser.Easing.Sinusoidal.InOut, true);
	
	this.leg1Tween.chain(this.leg1Tween2);
	this.leg1Tween2.chain(this.leg1Tween);
	this.leg1Tween.start();


	this.leg2Tween = this.game.add.tween(this.fEnemyLeg2).to( {angle:10}, 500, Phaser.Easing.Sinusoidal.InOut, true);
	this.leg2Tween2 = this.game.add.tween(this.fEnemyLeg2).to(  {angle:0}, 500, Phaser.Easing.Sinusoidal.InOut, true);
	
	this.leg2Tween.chain(this.leg2Tween2);
	this.leg2Tween2.chain(this.leg2Tween);
	this.leg2Tween.start();


		//
	this.drop(500, 650); //timer time and distance


};



alienEnemy.prototype.float = function(myY) {
	this.MyY = myY + 30;
	
	this.tweenBtn = this.game.add.tween(this.fEnemyShip).to( {y:this.MyY}, 500, Phaser.Easing.Sinusoidal.InOut, true);
	this.tween2Btn = this.game.add.tween(this.fEnemyShip).to(  {y:myY}, 500, Phaser.Easing.Sinusoidal.InOut, true);
	
	this.tweenBtn.chain(this.tween2Btn);
	this.tween2Btn.chain(this.tweenBtn);
	this.tweenBtn.start();

}

alienEnemy.prototype.update = function() {

	this.fAlienHeadPrefab.y = this.fEnemyShip.y+this.AlienHeadY;
	this.fAlienHeadPrefab.x = this.fEnemyShip.x+this.AlienHeadX;
	this.fAlienWindow.x = this.fEnemyShip.x+this.alienWindowX;
	this.fAlienWindow.y = this.fEnemyShip.y+this.alienWindowY;
	this.fEnemyLeg.x = this.fEnemyShip.x+this.enemyLegX;
	this.fEnemyLeg.y = this.fEnemyShip.y+this.enemyLegY;
	this.fEnemyLeg2.x = this.fEnemyShip.x+this.enemyLeg2X;
	this.fEnemyLeg2.y = this.fEnemyShip.y+this.enemyLeg2Y;
	this.fEngine.x = this.fEnemyShip.x+this.fEngineX;
	this.fEngine.y = this.fEnemyShip.y+this.fEngineY;
	this.fEnemyBar.x = this.fEnemyShip.x + this.fEnemyBarX;
	this.fEnemyBar.y = this.fEnemyShip.y + this.fEnemyBarY;

	
	this.isMovingHorizontal =  false;
	this.isMovingVertical =  false;
	this.isKilled =  false;

this.game.physics.arcade.collide(this.fEnemyShip , this.game.state.getCurrentState().fEnemyShots, this.autoHit, null, this);
this.game.physics.arcade.collide(this.game.state.getCurrentState().fBullets , this.fEnemyShip, this.bulletEnemyHit, null, this);
this.game.physics.arcade.overlap( this.game.state.getCurrentState().fPlayer, this.fEnemyShip , this.kickBigEnemy, null, this);


	if(this.fEnemyShip.y>1800){
		
		this.appearTime.destroy();
		this.destroyTimer.destroy();
		this.game.state.getCurrentState().isBossShow = false; //para que no vuelva aparacer en caso de que ya haya uno en pantalla

			BgMusic.stop();
			BgMusic2.stop();

		this.game.finalScore = this.game.state.getCurrentState().fPlayer.coins;
		this.game.currentLevel = this.game.state.getCurrentState().fPlayer.myLevel;
		this.game.state.getCurrentState().shakeAndFlash();
		this.game.state.start("finalScreen");
		this.destroyTimer.destroy();
		this.destroy();

	}

		if(this.fEnemyShip.y<-300){
	
		  this.appearTime.destroy();
			if(typeof this.destroyTimer !== "undefined"){

					this.destroyTimer.destroy();
			}
		this.game.state.getCurrentState().isBossShow = false;
		this.destroy();

	}
};


alienEnemy.prototype.autoHit = function (enemyCasquet,shot) {
if(!this.isKilled){
	if(shot.isKicked){
		shot.enabled =  false;
		this.getDamage(this.game.state.getCurrentState().fPlayer.myLevel*this.damagePower);
		shot.myTimer.destroy();
		shot.destroy();
		this.game.state.getCurrentState().shakeAndFlash();
	
	}
	}
}

alienEnemy.prototype.bulletEnemyHit = function (enemyCasquet,bullet) {
	if(!this.isKilled){
	this.getDamage(enemyCasquet.game.state.getCurrentState().fPlayer.myLevel*this.damagePower);
	this.game.state.getCurrentState().shakeAndFlash();
	}
	bullet.destroy();
}

alienEnemy.prototype.kickBigEnemy = function (player,enemyCasquet) {
if(!this.isKilled){
			this.game.state.getCurrentState().shakeAndFlash();
			player.body.velocity.x = -600;
	
	}	
}


alienEnemy.prototype.getDamage = function(damage) {
	this.life-=damage;
	if(this.life<=0){
		this.life = 0;
	if(!this.destroying){
		
		this.destroying =  true;
		this.destroyShip();
	}	
}
	this.fEnemyBar.fEnemyLifeFull.width=this.life*this.fullLifeWidth/100;
}

alienEnemy.prototype.leaveScreen = function() {
	this.isKilled = true;

	 if(typeof this.tweenBtn !== "undefined"){
		this.tweenBtn.stop();
		this.tween2Btn.stop();

	 }
	
	if(typeof this.fireaBallTimer !== "undefined"){
		//console.log('destroyin fireball timer')
		this.fireaBallTimer.destroy();
	}

	if(typeof this.dropTimer !== "undefined"){
			//console.log('destroyin drop timer')
		this.dropTimer.destroy();
	}
	
   
    if(typeof this.moveHorizontalTimer !== "undefined"){
    		//console.log('destroyin moveHorizontal timer')
    	this.moveHorizontalTimer.destroy();
    }

    if(typeof this.moveVerticalTimer !== "undefined"){
    		//console.log('destroyin moveVertical timer')
    	this.moveVerticalTimer.destroy();
    }
   	
	this.fEnemyShip.body.gravity.y = -40;

 


}


alienEnemy.prototype.destroyShip = function(time, distance) {
	this.isKilled = true;
	this.fAlienHeadPrefab.animations.play('attack');
	 if(typeof this.tweenBtn !== "undefined"){
		this.tweenBtn.stop();
		this.tween2Btn.stop();

	 }
	
	if(typeof this.fireaBallTimer !== "undefined"){

		this.fireaBallTimer.destroy();
	}

	if(typeof this.dropTimer !== "undefined"){
		this.dropTimer.destroy();
	}
	
   
    if(typeof this.moveHorizontalTimer !== "undefined"){
    	this.moveHorizontalTimer.destroy();
    }

    if(typeof this.moveVerticalTimer !== "undefined"){
    	this.moveVerticalTimer.destroy();
    }
   	
	this.fEnemyShip.body.gravity.y = 20;

 	this.destroyTimer = this.game.time.create(false);
    this.destroyTimer.loop(250, destroying, this);
    this.destroyTimer.start();

    function destroying(){
    	console.log('destroying');
		for(var i=0; i<=5; i++){

			this.game.state.getCurrentState().createCoins(this.fEnemyShip.world.x,this.fEnemyShip.world.y,500,true);	
			}
    	wichKick  = Math.round(Math.random()*3);
			
			switch(wichKick){
				case 1:
				punch1.play('punch1');
				break;
				case 2:
				punch2.play('punch2');
				break;
				case 3:
				punch3.play('punch3');
				break;
				default:
				punch1.play('punch1');
				break;

			}
		
    	this.fEnemyShip.tint = 0xd827d8;
    	const randomx =  Math.random(100 - 10 )+ 10;
    	const randomy =  Math.random(100 - 10 )+ 10;
    	const randomSize = Math.random(1 - 0.1) + 0.1;
		var _explotion = new explotion(this.game, this.fEnemyShip.x+randomx,this.fEnemyShip.y+randomy);
		_explotion.scale.setTo(randomSize);
		this.add(_explotion);

    }

}

alienEnemy.prototype.drop = function(time, distance) {

	this.dropTimer = this.game.time.create(false);
    this.dropTimer.loop(time, dropping, this);
    this.dropTimer.start();

    function dropping(){

    
    	this.fEnemyShip.body.velocity.y = 100;
		if(this.fEnemyShip.y >= distance){
			this.fEnemyShip.body.velocity.y = 0;
			this.dropTimer.destroy();
			this.float(this.fEnemyShip.y);

			this.randomActivity();
			this.moveHorizontal();
		}

    }

	
}

alienEnemy.prototype.moveHorizontal = function() {
	this.isMovingHorizontal = true;
	this.isMovingVertical = false;
	const veloX = 50;
	this.moveHorizontalTimer = this.game.time.create(false);
    this.moveHorizontalTimer.loop(500, killTimer, this);
    this.moveHorizontalTimer.start();

	this.randomDir = Math.random() < 0.5;
if(!this.isKilled ){
	if(this.randomDir ){

		this.fEnemyShip.body.velocity.x = veloX;

	}else{
		this.fEnemyShip.body.velocity.x = -veloX;
	}

	}

      function killTimer(){
      if(!this.isKilled ){
	   	if(this.fEnemyShip.x >= 300){
			this.fEnemyShip.body.velocity.x = -veloX;
			 this.moveHorizontalTimer.destroy();
			this.moveVertical();
		}

		if(this.fEnemyShip.x <= -100){
		this.fEnemyShip.body.velocity.x = veloX;
		 this.moveHorizontalTimer.destroy();
			this.moveVertical();
		}

    }

 }
}


alienEnemy.prototype.moveVertical = function() {
	this.isMovingVertical = true;
	this.isMovingHorizontal =  false;
	const veloY = 100;
	this.tweenBtn.stop();
	this.tween2Btn.stop();	

this.randomDir = Math.random() < 0.5;

if(!this.isKilled ){
	if(this.randomDir ){
		if(this.fEnemyShip.y >= 900){
			this.fEnemyShip.body.velocity.y = -veloY;
		}else{
			this.fEnemyShip.body.velocity.y = veloY;
		}
				

	}else{
		this.fEnemyShip.body.velocity.y = -veloY;
	}
}
	this.moveVerticalTimer = this.game.time.create(false);
    this.moveVerticalTimer.loop(250, killTimer, this);
    this.moveVerticalTimer.start();

      function killTimer(){
		
    if(!this.isKilled ){
	   	if(this.fEnemyShip.y >= 900){
				
			this.moveVerticalTimer.destroy();
			this.moveHorizontal();
			this.float(this.fEnemyShip.y);
		}

		if(this.fEnemyShip.y <= 500){
			this.fEnemyShip.body.velocity.y = veloY;
			this.moveVerticalTimer.destroy();
			this.moveHorizontal();
			this.float(this.fEnemyShip.y);
		}

	}
	
}
	

}


alienEnemy.prototype.randomActivity = function() {

	this.fireaBallTimer = this.game.time.create(false);
    this.fireaBallTimer.loop(2000, this.fireaBall, this);
    this.fireaBallTimer.start();

}

alienEnemy.prototype.fireaBall = function() {


	var _fireballInstance = new fireBall(this.game, this.fEnemyShip.x+1400, this.fEnemyShip.y-200);
	
	this.game.state.getCurrentState().fEnemyShots.add(_fireballInstance);
	
}