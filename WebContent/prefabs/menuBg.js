
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * menuBg.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function menuBg(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _menuBg1 = this.game.add.sprite(0.0, 0.0, 'menuBg', null, this);
	_menuBg1.fixedToCamera = true;
	
	var _buttonMenu = new upgradeBtn(this.game, 531.0, 1040.0);
	this.add(_buttonMenu);
	
	var _returnText = this.game.add.text(309.0, 1020.0, 'BASE AND UPGRADES', {"font":"bold 40px Arial","fill":"#ffffff"}, this);
	
	var _coins = this.game.add.text(387.0, 61.0, '0000', {"font":"bold 60px Arial","fill":"#683329"}, this);
	
	this.game.add.text(326.0, 149.0, 'Level', {"font":"bold 50px Arial","fill":"#ffffff"}, this);
	
	var _LevelNumber = this.game.add.text(522.0, 149.0, '00', {"font":"bold 50px Arial","fill":"#ffffff"}, this);
	
	var _userPic = this.game.add.sprite(162.0, 150.0, 'userPic', null, this);
	_userPic.anchor.set(0.5, 0.5);
	
	var _MultiJump = this.game.add.group(this);
	_MultiJump.position.set(-47.0, -31.0);
	
	this.game.add.text(316.0, 458.0, 'Multi Jump', {"font":"bold 60px Arial","fill":"#ffffff"}, _MultiJump);
	
	var _upgradeSign1 = new updateSign(this.game, 479.0, 577.0);
	_MultiJump.add(_upgradeSign1);
	
	var _Core1UpdateBtn = new updateBtn(this.game, 474.0, 664.0);
	_MultiJump.add(_Core1UpdateBtn);
	
	this.game.add.sprite(164.0, 507.0, 'core1', null, _MultiJump);
	
	var _Core1cost = this.game.add.text(428.0, 631.0, '00000', {"font":"bold 45px Arial","fill":"#ffffff"}, _MultiJump);
	
	var _SpeedForce = this.game.add.group(this);
	_SpeedForce.position.set(533.0, -31.0);
	
	this.game.add.text(316.0, 458.0, 'Speed Force', {"font":"bold 60px Arial","fill":"#ffffff"}, _SpeedForce);
	
	var _upgradeSign2 = new updateSign(this.game, 479.0, 577.0);
	_SpeedForce.add(_upgradeSign2);
	
	var _Core2UpdateBtn = new updateBtn(this.game, 474.0, 664.0);
	_SpeedForce.add(_Core2UpdateBtn);
	
	var _Core2cost = this.game.add.text(429.0, 631.0, '00000', {"font":"bold 45px Arial","fill":"#ffffff"}, _SpeedForce);
	
	this.game.add.sprite(164.0, 507.0, 'core2', null, _SpeedForce);
	
	var _SuperShot = this.game.add.group(this);
	_SuperShot.position.set(1119.0, -31.0);
	
	this.game.add.text(316.0, 458.0, 'Super Shot', {"font":"bold 60px Arial","fill":"#ffffff"}, _SuperShot);
	
	var _upgradeSign3 = new updateSign(this.game, 479.0, 577.0);
	_SuperShot.add(_upgradeSign3);
	
	var _Core3UpdateBtn = new updateBtn(this.game, 474.0, 664.0);
	_SuperShot.add(_Core3UpdateBtn);
	
	var _Core3cost = this.game.add.text(428.0, 631.0, '00000', {"font":"bold 45px Arial","fill":"#ffffff"}, _SuperShot);
	
	this.game.add.sprite(164.0, 507.0, 'core3', null, _SuperShot);
	
	var _explainText = this.game.add.text(42.0, 291.0, '*Each upgrade grants appearing rate and time usage', {"font":"bold 30px Arial","fill":"#ffffff"}, this);
	
	this.game.add.sprite(305.0, 60.0, 'menuCoin', null, this);
	
	var _levelBar = new levelBar(this.game, this);
	_levelBar.position.set(855.0, 933.0);
	
	var _playerName = this.game.add.text(325.0, 217.0, 'playerName', {"font":"bold 30px Arial","fill":"#ffffff","stroke":"#ffffff"}, this);
	
	var _resetBtn = this.game.add.sprite(680.0, 112.0, 'buttons', 'buttonMenu instance 10024', this);
	_resetBtn.scale.set(0.3, 1.0);
	
	var _resetText = this.game.add.text(689.0, 157.0, 'RESET ALL', {"font":"bold 30px Arial","fill":"#ffffff"}, this);
	
	
	
	// fields
	
	this.fReturnText = _returnText;
	this.fCoins = _coins;
	this.fLevelNumber = _LevelNumber;
	this.fUserPic = _userPic;
	this.fUpgradeSign1 = _upgradeSign1;
	this.fCore1UpdateBtn = _Core1UpdateBtn;
	this.fCore1cost = _Core1cost;
	this.fUpgradeSign2 = _upgradeSign2;
	this.fCore2UpdateBtn = _Core2UpdateBtn;
	this.fCore2cost = _Core2cost;
	this.fUpgradeSign3 = _upgradeSign3;
	this.fCore3UpdateBtn = _Core3UpdateBtn;
	this.fCore3cost = _Core3cost;
	this.fExplainText = _explainText;
	this.fLevelBar = _levelBar;
	this.fPlayerName = _playerName;
	this.fResetBtn = _resetBtn;
	this.fResetText = _resetText;
	
	this.myCreate();
	
}

/** @type Phaser.Group */
var menuBg_proto = Object.create(Phaser.Group.prototype);
menuBg.prototype = menuBg_proto;
menuBg.prototype.constructor = menuBg;

/* --- end generated code --- */
// -- user code here --

menuBg.prototype.myCreate =  function(){

	var fPlayerPhoto = this.game.add.sprite(80, 0, 'playerPhoto');
	this.add(fPlayerPhoto);
	fPlayerPhoto.anchor.setTo(0.5);
	fPlayerPhoto.scale.setTo(0.6);
	fPlayerPhoto.x =  this.fUserPic.x;
	fPlayerPhoto.y =  this.fUserPic.y;

	this.fPlayerName.text = this.game.playerName;

	this.menuIsOpen =  false;
	this.myIniYPos =  this.y;
	
	this.core1BaseCost = 0;
	this.core2BaseCost = 0;
	this.core3BaseCost = 0;

	this.core1Base = 100;
	this.core2Base = 200;
	this.core3Base = 300;
	
	this.fCore1UpdateBtn.inputEnabled = true;
	this.fCore1UpdateBtn.events.onInputDown.add(this.updateCore1, this);

	this.fCore2UpdateBtn.inputEnabled = true;
	this.fCore2UpdateBtn.events.onInputDown.add(this.updateCore2, this);

	this.fCore3UpdateBtn.inputEnabled = true;
	this.fCore3UpdateBtn.events.onInputDown.add(this.updateCore3, this);

	this.menuFirstOpen = false;
	//this.getCoreStats();
	this.fResetBtn.inputEnabled = true;
	this.fResetBtn.events.onInputDown.add(this.resetStats, this);

	this.firstTimeRstBtn = false;
	
};

menuBg.prototype.resetStats = function () {
if(!this.firstTimeRstBtn){
this.firstTimeRstBtn = true;	
this.fResetText.text = 'ok RESET?';
}else{

	var coins = 29;
	var level =  1;
	var core1Level = 0;
	var core2Level = 0;
	var core3Level = 0;
	var timesDefeated = 0;
	
	this.game.state.getCurrentState().resetProgress(coins,level,core1Level,core2Level,core3Level,this.game,true,timesDefeated);
	}

}


menuBg.prototype.getCoreStats =  function(){

	
if(!this.firstTimeRstBtn){
this.fResetText.text = 'RESET ALL';
}

	if(!this.menuFirstOpen){

		this.menuFirstOpen = true;

		for(var i = 0; i<this.game.state.getCurrentState().fPlayer.core1Level; i++){
			this.fUpgradeSign1.frame++;
			this.core1Base +=this.core1Base*0.3;
		} 
		for(var i = 0; i<this.game.state.getCurrentState().fPlayer.core2Level; i++){
			this.fUpgradeSign2.frame++;
			this.core2Base +=this.core2Base*0.3;
		}	
		for(var i = 0; i<this.game.state.getCurrentState().fPlayer.core3Level; i++){
			this.fUpgradeSign3.frame++;
			this.core3Base +=this.core3Base*0.3;
		} 

		
	}
	this.core1BaseCost = Math.round(this.core1Base+(this.core1Base*this.game.state.getCurrentState().fPlayer.myLevel*0.2));
		this.core2BaseCost = Math.round(this.core2Base+(this.core2Base*this.game.state.getCurrentState().fPlayer.myLevel*0.2));
		this.core3BaseCost = Math.round(this.core3Base+(this.core3Base*this.game.state.getCurrentState().fPlayer.myLevel*0.2));

}

menuBg.prototype.updateCore1 =  function(){

	if(this.game.state.getCurrentState().fPlayer.coins>=this.core1BaseCost){


		if(this.game.state.getCurrentState().fPlayer.core1Level<4){

				upgrade.play('upgrade');
			this.fUpgradeSign1.frame++;
			this.game.state.getCurrentState().fPlayer.coins -= this.core1BaseCost;

			console.log('antes ' + this.core1BaseCost + 'core1Base: '+ this.core1Base);

			this.core1Base +=this.core1Base*0.3;

			this.core1BaseCost = Math.round(this.core1Base+(this.core1Base*this.game.state.getCurrentState().fPlayer.myLevel*0.2));
			console.log('despues ' + this.core1BaseCost);
			
			this.game.state.getCurrentState().fPlayer.core1Level++;	
			this.game.state.getCurrentState().shakeAndFlash();
			this.fCore1cost.text = this.core1BaseCost;
		}else{

			this.fCore1cost.text = 'xxx';
		}
		
	}
	
}

menuBg.prototype.updateCore2 =  function(){

	if(this.game.state.getCurrentState().fPlayer.coins>=this.core2Base){


		if(this.game.state.getCurrentState().fPlayer.core2Level<4){
			upgrade.play('upgrade');
			this.fUpgradeSign2.frame++;
			this.game.state.getCurrentState().fPlayer.coins -= this.core2BaseCost;
			
			this.core2Base +=this.core2Base*0.3;

			this.core2BaseCost = Math.round(this.core2Base+(this.core2Base*this.game.state.getCurrentState().fPlayer.myLevel*0.2));
			
			
			this.game.state.getCurrentState().fPlayer.core2Level++;	
			this.game.state.getCurrentState().shakeAndFlash();

			this.fCore2cost.text = this.core2BaseCost;
		}else{

			this.fCore2cost.text = 'xxx';
		}
		
	}
	
}

menuBg.prototype.updateCore3 =  function(){

	if(this.game.state.getCurrentState().fPlayer.coins>=this.core3Base){


		if(this.game.state.getCurrentState().fPlayer.core3Level<4){
				upgrade.play('upgrade');
			this.fUpgradeSign3.frame++;
			this.game.state.getCurrentState().fPlayer.coins -= this.core3BaseCost;
			
			this.core3Base +=this.core3Base*0.3;

			this.core3BaseCost = Math.round(this.core3Base+(this.core3Base*this.game.state.getCurrentState().fPlayer.myLevel*0.2));
			
			
			this.game.state.getCurrentState().fPlayer.core3Level++;	
			this.game.state.getCurrentState().shakeAndFlash();
			this.fCore3cost.text = this.core3BaseCost;
		}else{

			this.fCore3cost.text = 'xxx';
		}
		
	}
	
}

menuBg.prototype.updateMenu =  function(){

	this.customUpdate = this.game.time.create(false);
    this.customUpdate.loop(500, this.customGet, this);
    this.customUpdate.start();
}

menuBg.prototype.stopUpdateMenu =  function(){

    this.customUpdate.destroy();
}

menuBg.prototype.customGet =  function(){

this.fCoins.text = this.game.state.getCurrentState().fPlayer.coins;

if(this.menuIsOpen){




	this.fLevelNumber.text = this.game.state.getCurrentState().fPlayer.myLevel;

	if(this.game.state.getCurrentState().fPlayer.core1Level>3){
		this.fCore1cost.text = 'xxx';
	}else{
		this.fCore1cost.text = this.core1BaseCost;	
	}

	if(this.game.state.getCurrentState().fPlayer.core2Level>3){
		this.fCore2cost.text = 'xxx';
	}else{
		this.fCore2cost.text = this.core2BaseCost;	
	}

	if(this.game.state.getCurrentState().fPlayer.core3Level>3){
		this.fCore3cost.text = 'xxx';
	}else{
		this.fCore3cost.text = this.core3BaseCost;	
	}
	

		if(this.game.state.getCurrentState().fPlayer.coins>=this.core1BaseCost && this.game.state.getCurrentState().fPlayer.core1Level<4){
			this.fCore1UpdateBtn.animations.play('able');
		}else{

			this.fCore1UpdateBtn.animations.play('cantUpdate');
		}

		if(this.game.state.getCurrentState().fPlayer.coins>=this.core2BaseCost && this.game.state.getCurrentState().fPlayer.core2Level<4){
			this.fCore2UpdateBtn.animations.play('able');
		}else{

			this.fCore2UpdateBtn.animations.play('cantUpdate');
		}

		if(this.game.state.getCurrentState().fPlayer.coins>=this.core3BaseCost && this.game.state.getCurrentState().fPlayer.core3Level<4){
			this.fCore3UpdateBtn.animations.play('able');
		}else{

			this.fCore3UpdateBtn.animations.play('cantUpdate');
		}
		
			
	}

}




