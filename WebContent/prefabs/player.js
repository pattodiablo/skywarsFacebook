
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * player
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function player(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'player', aFrame == undefined || aFrame == null? 'player0000' : aFrame);
	this.scale.set(0.5, 0.5);
	this.anchor.set(0.5, 0.5);
	this.animations.add('run', ['player0000', 'player0001', 'player0002', 'player0003', 'player0004', 'player0005', 'player0006', 'player0007', 'player0008', 'player0009', 'player0010', 'player0011', 'player0012', 'player0013', 'player0014', 'player0015', 'player0016', 'player0017', 'player0018', 'player0019', 'player0020', 'player0021'], 42, true);
	this.animations.add('up', ['jumnp0000', 'jumnp0001', 'jumnp0002', 'jumnp0003'], 24, true);
	this.animations.add('down', ['jump20000', 'jump20001', 'jump20002', 'jump20003', 'jump20004', 'jump20005', 'jump20006', 'jump20007', 'jump20008', 'jump20009', 'jump20010', 'jump20011', 'jump20012', 'jump20013', 'jump20014', 'jump20015', 'jump20016', 'jump20017', 'jump20018', 'jump20019'], 24, true);
	this.animations.add('kick', ['kick0000'], 1, true);
	var _anim_kick2 = this.animations.add('kick2', ['kick20000'], 1, false);
	_anim_kick2.play();
	this.game.physics.arcade.enable(this);
	this.body.gravity.y = 1300.0;
	this.body.friction.x = 0.0;
	
	this.myCreate();
	
}

/** @type Phaser.Sprite */
var player_proto = Object.create(Phaser.Sprite.prototype);
player.prototype = player_proto;
player.prototype.constructor = player;

/* --- end generated code --- */
// -- user code here --
player.prototype.myCreate = function() {
	
	if(typeof this.game.playerLevel !== "undefined"  ){
		this.myLevel = this.game.playerLevel;
		this.levelCap = 1000*this.myLevel;
		
	}else{
		this.myLevel = 1;
		this.levelCap=1000;
	
	}
	
	if(typeof this.game.playerCoins !== "undefined"  ){
		this.coins = this.game.playerCoins;
	}else{
		this.coins = 29;
	}
	console.log('me llega ' + this.game.playerCore1)
	if(typeof this.game.playerCore1 !== "undefined" ){
		console.log('core1generado');
		this.core1Level = this.game.playerCore1;
	}else{
		console.log('asignandoCore1');
		this.core1Level = 0;
	}

	if( typeof this.game.playerCore2 !== "undefined" ){
		this.core2Level = this.game.playerCore2;
	}else{
		this.core2Level = 0;
	}

	if(typeof this.game.playerCore3 !== "undefined" ){
		this.core3Level = this.game.playerCore3;
	}else{
		this.core3Level = 0;
	}



console.log('playercorelevel ' + this.core1Level);

	this.ExpPoints = 0;
	
	this.canJump =  false;	
	this.isKicking = false;
	this.canKick = false;
	this.canDoubleJump =  false;
	this.myDoubleJump = 0;
	this.isFalling = false;
	this.usingSpeedForce =  false;
	this.usingDoubleJump =  false;
	this.canShot = false;
	this.enableShootOnce = true;
	this.shootTimer = this.game.time.create(false);
	this.currentFillLevel = 0;
	this.totalLevelFill = 1000;

   	this.myTimer = this.game.time.create(false);
    this.myTimer.loop(200, this.timerUpdate, this);
    this.myTimer.start();

};

player.prototype.timerUpdate = function() {
if(this.canShot && this.enableShootOnce){
			this.enaBleShooting();
			this.enableShootOnce = false;
		}
			
		if(!this.canShot){
			this.shootTimer.destroy();
		}

		if(this.coins <= 0 ){

			this.coins = 0 ;
		}

		if(this.canJump==false && Math.sign(this.body.velocity.y)>=0 && !this.isKicking){
			this.animations.play('down');
			this.isFalling = true;
			
		}else{

			this.isFalling = false;
		}

}

player.prototype.enaBleShooting = function() {

	

    this.shootTimer.loop(500, function(){
    	laserShot.play('laserShot');
		var _Fireshot = new shot(this.game, this.x+this.width/2, this.y);
		this.game.state.getCurrentState().fBullets.add(_Fireshot);
		
	} , this);

    this.shootTimer.start();
}



player.prototype.getExp = function(comboHit) {	
	
	if(comboHit>=1){
		this.ExpPoints+=1*comboHit; //multiplicador de combo cuando hace mas de dos golpes en el aire
	}else{
		this.ExpPoints++;
	}

console.log(this.currentFillLevel);
this.currentFillLevel = this.ExpPoints/this.totalLevelFill;

	if(this.ExpPoints>=this.levelCap){
		levelUp.play('levelUp');
		this.myLevel++;
		this.ExpPoints = 0;
		this.game.state.getCurrentState().isBosstime = false;
		this.game.state.getCurrentState().newLevelAnim();
		
		var coins = this.coins;
		var level =  this.myLevel;
		var core1Level = this.core1Level;
		var core2Level = this.core2Level;
		var core3Level = this.core3Level;
	
	this.game.state.getCurrentState().saveProgress(coins,level,core1Level,core2Level,core3Level,this.game,false);

		}
}
