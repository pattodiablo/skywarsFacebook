
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.4 (Phaser v2.6.2)


/**
 * coin
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Number} aX The x coordinate (in world space) to position the Sprite at.
 * @param {Number} aY The y coordinate (in world space) to position the Sprite at.
 * @param {any} aKey This is the image or texture used by the Sprite during rendering. It can be a string which is a reference to the Cache entry, or an instance of a RenderTexture or PIXI.Texture.
 * @param {any} aFrame If this Sprite is using part of a sprite sheet or texture atlas you can specify the exact frame to use by giving a string or numeric index.
 */
function coin(aGame, aX, aY, aKey, aFrame) {
	Phaser.Sprite.call(this, aGame, aX, aY, aKey || 'powerUps', aFrame == undefined || aFrame == null? 'Symbol 4 instance 10000' : aFrame);
	this.scale.set(0.5, 0.5);
	this.anchor.set(0.5, 0.5);
	var _anim_shine = this.animations.add('shine', ['Symbol 4 instance 10000', 'Symbol 4 instance 10001', 'Symbol 4 instance 10002', 'Symbol 4 instance 10003', 'Symbol 4 instance 10004', 'Symbol 4 instance 10005', 'Symbol 4 instance 10006', 'Symbol 4 instance 10007', 'Symbol 4 instance 10008', 'Symbol 4 instance 10009', 'Symbol 4 instance 10010', 'Symbol 4 instance 10011', 'Symbol 4 instance 10012', 'Symbol 4 instance 10013', 'Symbol 4 instance 10014', 'Symbol 4 instance 10015', 'Symbol 4 instance 10016', 'Symbol 4 instance 10017', 'Symbol 4 instance 10018', 'Symbol 4 instance 10019', 'Symbol 4 instance 10020', 'Symbol 4 instance 10021', 'Symbol 4 instance 10022', 'Symbol 4 instance 10023', 'Symbol 4 instance 10024', 'Symbol 4 instance 10025', 'Symbol 4 instance 10026', 'Symbol 4 instance 10027', 'Symbol 4 instance 10028', 'Symbol 4 instance 10029'], 30, true);
	_anim_shine.play();
	this.game.physics.arcade.enable(this);
	this.body.bounce.y = 0.5;
	this.body.velocity.x = 300.0;
	this.body.velocity.y = 100.0;
	this.body.gravity.y = 900.0;
	
	this.myCreate();
	
}

/** @type Phaser.Sprite */
var coin_proto = Object.create(Phaser.Sprite.prototype);
coin.prototype = coin_proto;
coin.prototype.constructor = coin;

/* --- end generated code --- */
// -- user code here --
coin.prototype.myCreate = function() {
	
 
    this.killedByBullet =  false;
	this.myTimer = this.game.time.create(false);
    this.myTimer.loop(200, this.timerUpdate, this);
    this.myTimer.start();
   
    
};
coin.prototype.startRetrieve = function() {
	   this.enemyDeployTimer = this.game.time.create(false);
    this.enemyDeployTimer.loop(500, this.retriveCoin, this);
    this.enemyDeployTimer.start();
}
coin.prototype.setNoRetrieve = function() {
 this.noRetrieve =  true;

}
coin.prototype.retriveCoin = function() {
	
	this.enemyDeployTimer.destroy();
	this.myPoint =  new Phaser.Point(this.x,this.y);
	const distance = 0;
	

	if(typeof this !== "undefined"  ){
		if(typeof this !== "null"  ){

			const distance = Math.abs(this.myPoint.distance(this.game.state.getCurrentState().fPlayer));
		
		if(distance <= 300 || this.killedByBullet || !this.noRetrieve){
			this.tween = this.game.add.tween(this);
			this.tween.to({x:this.game.width-370,y:30}, 500, Phaser.Easing.Linear.None);
			this.tween.onComplete.add(this.captureCoin, this);
			this.tween.start();	
		}else{
			this.tint = 0x9e9e9e;
		}
		this.myTimer.destroy();

		}
	}


};

coin.prototype.captureCoin = function() {
	this.game.state.getCurrentState().getCoinSound(this.game);
	this.tween.stop();	
	this.game.state.getCurrentState().fPlayer.coins++;
	this.destroy();
};

coin.prototype.timerUpdate = function() {

		if(!this.killedByBullet){
			if(this.world.y>=1180 ){
				this.body.enable = false;
				this.myTimer.destroy();
				this.destroy();	
			}
	}
}
